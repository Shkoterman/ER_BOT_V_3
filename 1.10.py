import datetime
import telebot
import requests
import pickle
import random
from datetime import *  
from airtable import *
#from config_file_test import * #this is test
from config_file_prod import * #this is prod
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telegram import ParseMode

inlogtxt = datetime.now().strftime("%d-%m-%Y %H:%M") + ': bot has been started ' + '(' + BD_Mode + ')\n' #–¥–æ–ø–∏—Å—ã–≤–∞—é –≤—Ä–µ–º—è
print(inlogtxt)                                                         #–¥—É–±–ª–∏—Ä—É—é –≤ –∫–æ–Ω—Å–æ–ª—å
with open('log.txt', 'r+', encoding='utf-16') as f:                     #–æ—Ç–∫—Ä—ã–≤–∞—é –ª–æ–≥
    f.seek(0, 2)                                                        #–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    f.write(inlogtxt)                                                   #—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–ø–∏—Å—å

#bot = telebot.TeleBot('5865283503:AAHI8sUoRRzDh3d0w1TpNnY35ymAqDTv5A4')  # this is test
bot = telebot.TeleBot('5806434689:AAG383Pr1XxSpl4vjJ9rNFR27xJJA19bs0g') # this is prod

# do buttons
myregistrationbtn = types.KeyboardButton("–ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
sendreminderbtn = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
testbtn = ty+pes.KeyboardButton("test")
regoneventbtn = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
changenamebtn = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è')
changenickbtn = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫')
backbtn = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
mainmenubtn = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
yesbtn = types.KeyboardButton('–î–∞')
nobtn = types.KeyboardButton('–ù–µ—Ç')
changebtn = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –∏–ª–∏ –∏–º—è')
askfeedbackbtn = types.KeyboardButton('–†–∞–∑–æ—Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Ñ–∏–¥–±—ç–∫–∞')
allaoboutsubscriptionbtn = types.KeyboardButton('–í—Å–µ –ø—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É')
readybtn = types.KeyboardButton('–ì–æ—Ç–æ–≤–æ')
sendfeedbackbtn = types.KeyboardButton('–û—Ç–∑—ã–≤ –æ —Å–æ–±—ã—Ç–∏–∏')
skipbtn = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
pingbtn = types.KeyboardButton('üñï')
onetotenbtn=[]
for i in range(11):
    onetotenbtn.append(types.KeyboardButton(str(i)))
paybtn = types.KeyboardButton('–û–ø–ª–∞—Ç–∞')

adminlist = open('admin_list.txt', 'r', encoding='UTF-8').read().split('\n') #–æ—Ç–∫—Ä—ã–≤–∞—é txt —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–æ–≤


# create dicts that coteins users nicks and all them events
user_event_names_dict = {}                      # {nick: event_name, event_name}
event_name_event_id_dict = {}                   # {event_id: event_name <-/-> event_name: event_id}
user_names_chatid_dict = {}                     # {nick: chatid <-/-> chatid: nick}
with open('user_names_chatid.pkl', 'rb') as f:  # load DB of users
    user_names_chatid_dict = pickle.load(f)
event_names_chatid_dict = {}                    # {event_name: chatid, chatid}
event_ids_for_feedback_dict={}
event_names_for_feedback_dict={}
eventList = {}                                  #—Å–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
pnick = {}
is_user_subscribed={}
feedback_dict={}
feedback_messages_list=['–û –∫–∞–∫–æ–º —Å–æ–±—ã—Ç–∏–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?',
                        '–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª_–∞ –±—ã —Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –∏ –∑–Ω–∞–∫–æ–º—ã–º? –ì–¥–µ 0 - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Å–æ–≤–µ—Ç—É—é –∏ –±—É–¥—É –æ—Ç–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å, –∞ 10 - –±—É–¥—É –≤—Å–µ –≤—Ä–µ–º—è –∑–≤–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.',
                        '–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?',
                        '–ß—Ç–æ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å –ª–∏—à–Ω–∏–º –∏–ª–∏ —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ?',
                        '–ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                        '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?']

what_did_you_like_list={}
def call_event_name_event_id_dict(): #{event_id: event_name <-/-> event_name: event_id}
    airtable = Airtable(airtale_app, event_tbl, api_key_R)
    response_event = airtable.get_all(view=event_future_view)
    for i in range(len(response_event)):
        event_id=response_event[i]['id']
        event_name=response_event[i]['fields']['Name event']
        event_name_event_id_dict[event_id]=event_name
        event_name_event_id_dict[event_name]=event_id

def call_user_event_names_dict():  # {nick: event_name, event_name}
    call_event_name_event_id_dict()
    airtable = Airtable(airtale_app, airtable_reg_tbl, api_key_R)
    response_reg = airtable.get_all(view=event_for_reg_future_events_view)
    for i in range(len(response_reg)):
        try:
            user_nick=response_reg[i]['fields']['You login in TG (reg)'].lower().replace(' ','')
            if user_nick[0]!='@':
                user_nick='@'+user_nick
            user_event_id=''.join(response_reg[i]['fields']['Event for reg'])
            user_event=event_name_event_id_dict[user_event_id]
            if user_nick in user_event_names_dict.keys():
                if user_event not in user_event_names_dict[user_nick]:
                    user_event_names_dict[user_nick].append(user_event)
            else:
                user_event_names_dict[user_nick]=user_event.split('/*{}')
        except Exception as ex:
            i+=1
def call_event_names_chatid_dict(): # {event_name: chatid, chatid}\
    call_event_name_event_id_dict()
    airtable = Airtable(airtale_app, airtable_reg_tbl, api_key_R)
    response_reg = airtable.get_all(view=event_for_reg_future_events_view)
    for i in range(len(response_reg)):
        try:
            event_id=''.join(response_reg[i]['fields']['Event for reg'])
            event_name=event_name_event_id_dict[event_id]
            user_nick=response_reg[i]['fields']['You login in TG (reg)'].lower().replace(' ','')
            if user_nick[0]!='@':
                user_nick='@'+user_nick
            if user_nick in user_names_chatid_dict.keys():
                user_chat_id=user_names_chatid_dict[user_nick]
                if event_name in event_names_chatid_dict.keys():
                    if user_chat_id not in event_names_chatid_dict[event_name]:
                        event_names_chatid_dict[event_name].append(user_chat_id)
                else:
                    event_names_chatid_dict[event_name]=[]
                    event_names_chatid_dict[event_name].append(user_chat_id)
        except:
            i+=1
def call_event_for_feedback_dict():
    airtable = Airtable(airtale_app, event_tbl, api_key_R)
    response_feedack = airtable.get_all(view=event_tbl_for_feedback_view)
    for i in range(len(response_feedack)):
        eventname = response_feedack[i]['fields']['Name event']
        eventid = response_feedack[i]['id']
        event_ids_for_feedback_dict[eventid] = eventname
        event_names_for_feedback_dict[eventname] = eventid

call_event_for_feedback_dict()
call_event_names_chatid_dict()                                                #–≤—ã–∑—ã–≤–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
call_user_event_names_dict()
call_event_name_event_id_dict()
@bot.message_handler(commands=["start"])                                    #—è –Ω–µ –∑–Ω–∞—é —á—Ç–æ —ç—Ç–æ(((( –≤–∏–¥–∏–º–æ —à—Ç—É–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —è —Ö–∑
def Start(m):
    #–ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å –¥–æ—Ä–æ–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    nick = m.from_user.username
    if m.from_user.username == None:
        nick = 'nobody'
    write_in_log_regular_events(inlogtxt='@' + nick + ' –Ω–∞–∂–∞–ª_a \start')     #–ø–∏—Å—å–∫–∞ –≤ –ª–æ–≥

    # call markup
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)                #–º–∞—Ä–∫–∞–ø —ç—Ç–æ —Ç–∏–ø–∞ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫. –æ–±—ä—è–≤–ª—è—é
    markup.add(myregistrationbtn, regoneventbtn, sendfeedbackbtn, allaoboutsubscriptionbtn, paybtn)  #–¥–æ–±–∞–≤–ª—è—é
    if m.from_user.username in adminlist:                                   #–µ—Å–ª–∏ —á–µ–ª –≤ –∞–¥–º–∏–Ω –ª–∏—Å—Ç–µ –¥–æ–±–∞–≤–ª—è—é –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        markup.add(sendreminderbtn, testbtn, askfeedbackbtn, pingbtn)
        write_in_log_regular_events(inlogtxt='@' + m.from_user.username + ' –≤–∑—è–ª_–∞ –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø')                                              #–ø–∏—Å—å–∫–∞ –≤ –ª–æ–≥

    # send helo text
    hello_text=open(hello_txt, 'r', encoding='UTF-8').read()
    bot.send_message(m.from_user.id, text="".join(hello_text), parse_mode=ParseMode.HTML, reply_markup=markup, disable_web_page_preview=True)

    add_user(m)                                                             #–¥–æ–±–∞–≤–ª—è—é —é–∑–µ—Ä–∞ –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç

@bot.message_handler(content_types=["text"])                                #—è –Ω–µ –∑–Ω–∞—é —á—Ç–æ —ç—Ç–æ(((( –≤–∏–¥–∏–º–æ —à—Ç—É–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —è —Ö–∑
def handle_text(message):
    user_id = message.chat.id                                               #—ç—Ç–æ –∞–π–¥–∏ —é–∑–µ—Ä–∞. –±–æ—Ç –æ–±—â–∞–µ—Ç—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –∞–π–¥–∏

    # registration check
    if message.text.strip() == '–ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏':                           #—Ç—É—Ç –∏ –¥–∞–ª—å—à–µ —Ç–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–∏—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞
        if message.from_user.username is not None:
            add_user(message)
            call_user_event_names_dict()                                      #–æ–±–Ω–æ–≤–ª—è—é –±–¥
            user_id = message.chat.id
            pnick[user_id] = '@'+message.from_user.username.lower()         #–≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É—é —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã —Ç–≥ –Ω–∏–∫–∏ –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏—Å—å –∫–æ–≥–¥–∞ –¥–≤–∞ —á–µ–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —Ä–µ–≥—É –æ—Ç–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

            if pnick[user_id] in user_event_names_dict:                                                 #–ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Ç–≥ –Ω–∏–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ
                eventList[user_id] = user_event_names_dict[pnick[user_id]]                              #–∑–∞–ø–æ–ª–Ω—è—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ–¥–Ω–∏–º "—Å–ª–æ–≤–æ–º" –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                bot.send_message(user_id, text="–í–æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∞:")
                bot.send_message(user_id, text="\n".join(eventList[user_id]))
                eventList[user_id] = []                                                                 #–æ—á–∏—â–∞—é –¥–ª—è –±—É–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            else:
                bot.send_message(user_id, text="–û–≥–æ! –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∞ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ(")
            main_menu(message)
            write_in_log_regular_events(inlogtxt='@' + message.from_user.username + ' –∑–∞–ø—Ä–æ—Å–∏–ª_a —Å–≤–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä—Ü–∏–∏')
        else:
            bot.send_message(user_id, text="–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∏–∫ —Å @")
            main_menu(message)
            write_in_log_regular_events(inlogtxt='–∞–Ω–æ–Ω –∑–∞–ø—Ä–æ—Å–∏–ª_a —Å–≤–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä—Ü–∏–∏')              #–ø–∏—Å—å–∫–∞ –≤ –ª–æ–≥

    # registration
    elif message.text.strip() == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
        get_registration_list()                                                                                         #–ø–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        if message.from_user.username==None:                                                                            #–µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞ –æ—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ
            bot.send_message(message.chat.id, text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∏–∫ —Å @')
            main_menu(message)

        elif get_registration_list.avalible_event_name_event_id_dict_full == {}:                                        #–Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            bot.send_message(message.chat.id, text='–û, –±–ª–∏–Ω! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø–∏—è—Ç–∏–π(((')
            main_menu(message)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for i in range(len(get_registration_list.avalible_event_name_event_id_dict_full)):                          #–¥–∞—é –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                btn = types.KeyboardButton(list(get_registration_list.avalible_event_name_event_id_dict_full.keys())[i])
                markup.add(btn)
            markup.add(backbtn)                                                                                         #–¥–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∞
            send=bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', reply_markup=markup)
            reg_event_ID = None                                                                                         #–¥–∞—é –ø—É—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö –¥–∞–ª—å—à–µ
            reg_event_name = None
            user_nick = None
            user_name = None
            bot.register_next_step_handler(send, chose_event_for_reg, get_registration_list.avalible_event_name_event_id_dict_full, get_registration_list.avalible_event_name_event_id_dict_poor, reg_event_ID, reg_event_name, user_nick, user_name, markup) #–∂–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —é–∑–µ—Ä–∞ –∏ –æ—Ç—Å—ã–ª–∞—é –æ—Ç–≤–µ—Ç –≤
        add_user(message)
    elif message.text.strip() == '–í—Å–µ –ø—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É':
        aboutsubtext = open('./allaoboutsubscription.txt', 'r', encoding='UTF-8').read()              #–æ—Ç–∫—Ä—ã–≤–∞—é —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é
        bot.send_message(message.from_user.id, text="".join(aboutsubtext), parse_mode='Markdown',
                         disable_web_page_preview=True)
        write_in_log_regular_events(inlogtxt='@' + message.from_user.username + ' —É–∑–Ω–∞–ª –≤—Å–µ –ø—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É')
        add_user(message)
    elif message.text.strip() == '–û—Ç–∑—ã–≤ –æ —Å–æ–±—ã—Ç–∏–∏':
        feedback_preseting(message)
        add_user(message)

    elif message.text.strip() == 'üñï':
        bot.send_message(message.chat.id, text='üñï')

    elif message.text.strip() == '–û–ø–ª–∞—Ç–∞':
        bot.send_photo(message.chat.id, photo=open('donate.jpg', 'rb'), caption='–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–∂–µ—Ä–≤–æ–≤–∞—Ç—å" –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—É—é –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é. \n–ü—Ä–∏–º–∏ –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ —á—Ç–æ –≤ –ø–æ–ª–µ "Tip (Optional)" –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 1‚Ç¨ –º–µ–Ω—à—å–µ —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–ª–∞—Ç–∏—Ç—å. –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –ø–æ–ª–µ "Total", –∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–≤–µ—Ö—É')
        bot.forward_message(message.chat.id, 214130351, donate_message_id)
#–ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò
    elif message.text.strip() == '–†–∞–∑–æ—Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Ñ–∏–¥–±—ç–∫–∞' and message.from_user.username in adminlist:
        chose_feedack_event(message)                                                                                    #—Å—Ä–∞–∑—É –≤ –º–µ—Ç–æ–¥

    # rassylka
    elif message.text.strip() == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' and message.from_user.username in adminlist:
        call_event_names_chatid_dict()                                                                  #–æ–±–Ω–æ–≤–∏–ª –±–∞–∑—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(len(list(event_names_chatid_dict.keys()))):                                  #—Å–¥–µ–ª–∞–ª –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            btn = types.KeyboardButton(list(event_names_chatid_dict.keys())[i])
            markup.add(btn)
        markup.add(backbtn)                                                                         #–¥–æ–±–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        send=bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', reply_markup=markup)
        bot.register_next_step_handler(send, chose_event_for_spam)                                  #–∂–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —é–∑–µ—Ä–∞ –∏ –æ—Ç—Å—ã–ª–∞—é –æ—Ç–≤–µ—Ç –≤ chose_event_for_spam


    elif message.text.strip() == 'test' and message.from_user.username=='Shkoterman':                                               #—Ç–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

        def test():
            print('test')


            #call_event_name_event_id_dict()
            #print(event_name_event_id_dict)
            #print(len(event_name_event_id_dict))

            #call_event_names_chatid_dict()
            #print(event_names_chatid_dict)
            #print(len(event_names_chatid_dict))

            #call_user_event_names_dict()
            #print(user_event_names_dict)
            #print(len(user_event_names_dict))
        test()

    else:   #–∫–æ–≥–¥–∞ –Ω–µ–ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É
        bot.send_message(message.chat.id, text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–ª–∏ —á–∏—Ç–∞—Ç—åüòî –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ - –ø–∏—à–∏—Ç–µ @julia_sergina. –ï—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        try:
            nick=message.from_user.username
            if nick == None:
                nick = 'nobody'
            write_in_log_misunderstand(inlogtxt='–±–æ—Ç –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—ã –æ—Ç @' + nick + ': ' + message.text)
            write_feedback_at_airtale(message,
                                      event_id=[],
                                      recomendacion=0,
                                      what_did_you_like=[],
                                      lishnee='',
                                      comment=message.text,
                                      user_name='',
                                      event_name='',
                                      misunderstand=True)
        except Exception as ex:
            write_in_log_error(inlogtxt=str(ex))
        main_menu(message)

def write_in_log_regular_events(inlogtxt):                                                 #–∑–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ –ª–æ–≥
    try:
        inlogtxt = datetime.now().strftime("%d-%m-%Y %H:%M") + ': ' + inlogtxt + '\n' #–¥–æ–ø–∏—Å—ã–≤–∞—é –≤—Ä–µ–º—è
        print(inlogtxt)                                                         #–¥—É–±–ª–∏—Ä—É—é –≤ –∫–æ–Ω—Å–æ–ª—å
        with open('log.txt', 'r+', encoding='utf-16') as f:                     #–æ—Ç–∫—Ä—ã–≤–∞—é –ª–æ–≥
            f.seek(0, 2)                                                        #–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            f.write(inlogtxt)                                                   #—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–ø–∏—Å—å
    except Exception as ex:
        write_in_log_error(str(ex))

def write_in_log_error(inlogtxt):                                                 #–∑–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ –ª–æ–≥
    inlogtxt = datetime.now().strftime("%d-%m-%Y %H:%M") + ': ERROR: ' + inlogtxt + '\n' #–¥–æ–ø–∏—Å—ã–≤–∞—é –≤—Ä–µ–º—è
    print(inlogtxt)                                                         #–¥—É–±–ª–∏—Ä—É—é –≤ –∫–æ–Ω—Å–æ–ª—å
    with open('log_error.txt', 'r+', encoding='utf-16') as f:                     #–æ—Ç–∫—Ä—ã–≤–∞—é –ª–æ–≥
        f.seek(0, 2)                                                        #–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        f.write(inlogtxt)                                                   #—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–ø–∏—Å—å

def write_in_log_misunderstand(inlogtxt):                                                 #–∑–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ –ª–æ–≥
    try:
        inlogtxt = datetime.now().strftime("%d-%m-%Y %H:%M") + ': ' + inlogtxt + '\n' #–¥–æ–ø–∏—Å—ã–≤–∞—é –≤—Ä–µ–º—è
        print(inlogtxt)                                                         #–¥—É–±–ª–∏—Ä—É—é –≤ –∫–æ–Ω—Å–æ–ª—å
        with open('log_misunderstand.txt', 'r+', encoding='utf-16') as f:                     #–æ—Ç–∫—Ä—ã–≤–∞—é –ª–æ–≥
            f.seek(0, 2)                                                        #–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            f.write(inlogtxt)                                                   #—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–ø–∏—Å—å
    except Exception as ex:
        write_in_log_error(str(ex))

def add_user(m):                                                            # add to dict if there is no {nick: chatid <-/-> chatid: nick}
    #nick = m.from_user.username.lower()                                     #–¥–µ–ª–∞—é –≤—Å—ë —Å—Ç—Ä–æ—á–Ω—ã–º–∏
    if m.from_user.username==None:                                                          #–µ—Å–ª–∏ –Ω–∏–∫–∞ –Ω–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã—Ç, –¥–µ–ª–∞—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∏–∫
        nick = '@nobody'+str(m.chat.id)
    else:
        nick = '@' + m.from_user.username.lower()                               # –¥–æ–±–∞–≤–ª—è—é @
    user_id = m.chat.id
    if nick not in user_names_chatid_dict or user_id not in user_names_chatid_dict: #–µ—Å–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–¥ –Ω–µ—Ç –Ω–∏–∫–∞ –∏–ª–∏ –∞–π–¥–∏ –¥–æ–±–∞–≤–ª—è—é
        user_names_chatid_dict[nick.lower()] = user_id
        user_names_chatid_dict[user_id]=nick.lower()
        write_in_log_regular_events(inlogtxt=nick + ' –¥–æ–±–∞–≤–∏–ª—Å—è –≤ —é–∑–µ—Ä–ª–∏—Å—Ç')
        with open('user_names_chatid.pkl', 'wb') as f:
            pickle.dump(user_names_chatid_dict, f, pickle.HIGHEST_PROTOCOL)  #—Å–æ—Ö—Ä–∞–Ω—è—é –≤ —Ñ–∞–π–ª

def main_menu(message):                                                     #–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(myregistrationbtn, regoneventbtn, sendfeedbackbtn, allaoboutsubscriptionbtn, paybtn)
    if message.from_user.username in adminlist:
        markup.add(sendreminderbtn, testbtn, askfeedbackbtn, pingbtn)
        types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.chat.id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
    add_user(message)

def get_registration_list():        #–º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ —Å–ª–æ–≤–∞—Ä—è. –°–æ –≤—Å–µ–º–∏ —ç–≤–µ–Ω—Ç–∞–º–∏ –∏ —Å –±–µ—Å–ª–ø–∞—Ç–Ω—ã–º–∏
    response_avalible_event = requests.get(endpoint_avalible_event, headers=headers_R)  #–∑–∞–ø—Ä–æ—Å –≤ —ç–∏—Ä—Ç—ç–π–±–ª
    database_avalible_event = response_avalible_event.json()
    database_avalible_event_len = len(database_avalible_event['records'])               #–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –Ω—ë–º
    get_registration_list.avalible_event_name_event_id_dict_full = {}                   #–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    get_registration_list.avalible_event_name_event_id_dict_poor = {}                   #—Å–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    for i in range(database_avalible_event_len):
        get_registration_list.avalible_event_name_event_id_dict_full[database_avalible_event['records'][i]['fields']['Name event'].strip()] = database_avalible_event['records'][i]['id']   #–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∑–∞–ø–∏—Å—ã–≤–∞—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
        try:        #—è —Ö–∑ –ø–æ—á–µ–º—É, –Ω–æ –µ—Å–ª–∏ –≤ —ç–π—Ä—Ç—ç–π–±–ª–µ –Ω–µ —Å—Ç–æ–∏—Ç –≥–∞–ª–æ—á–∫–∞ –≤ –ø–æ–ª–µ, —Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –≤–∞—â–µ –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—è –∞ –µ—Å–ª–∏ –≥–∞–ª–æ—á–∫–∞ —Å—Ç–æ–∏—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä—É
           if database_avalible_event['records'][i]['fields']['is_it_subscribers_only']==True:  #–µ—Å–ª–∏ –æ–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ–µ —Ç–æ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é –µ–≥–æ –≤ —Å–ø—Å–∏–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö
                i+=1
        except:
                get_registration_list.avalible_event_name_event_id_dict_poor[database_avalible_event['records'][i]['fields']['Name event'].strip()] = database_avalible_event['records'][i]['id'] #–µ—Å–∏ –≤ –ø–æ–ª–µ –ø–æ–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –∑–Ω–∞—á–∏—Ç –ø–æ —Å—É—Ç–∏ —Ñ—ç–ª—Å –∏ —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–µ

def chose_event_for_spam(message):                                      #–º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∏
    call_event_names_chatid_dict()                                          #–æ–±–Ω–æ–≤–ª—è—é –±–¥
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text in list(event_names_chatid_dict.keys()):            #–µ—Å–ª–∏ —é–∑–µ—Ä –≤—ã–±—Ä–∞–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event_for_spam = message.text                                   #–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —ç—Ç–æ —Ç–µ–∫—Å—Ç –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(backbtn)                                             #–∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        send = bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ –¥–µ–ª–∞–π –∞–±–æ–Ω–¥–µ–¥ —Å—Å—ã–ª–æ–∫, –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –ø—Ä–æ—á.', reply_markup=markup)
        bot.register_next_step_handler(send, ask_send_spam, event_for_spam)     #–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —é–∑–µ—Ä–∞ –∏ –ø–µ—Ä–µ–¥–∞—é –µ–≥–æ –≤ ask_send_spam
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    else:
        send=bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.send_message(message.chat.id, text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –∫–∞–∂–µ—Ç—Å—è —è –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')   #–µ—Å–ª–∏ —é–∑–µ—Ä –Ω–∞–ø–∏—Å–∞–ª —Ö–æ–µ–Ω—å, —Ç–æ —Å–º–µ—à–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
        bot.register_next_step_handler(send, chose_event_for_spam)                                                                  #–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ —ç—Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥

def ask_send_spam(message, event_for_spam):                             #–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å—ë
    if message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    else:
        user_id = message.chat.id                                       #–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –æ—Ç–º–µ–Ω–∞, —Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        message_for_spam = message
        list_of_spam_niks  = []                                         #—Å–ø–∏—Å–æ–∫ –Ω–∏–∫–æ–≤ (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        list_of_spam = list(event_names_chatid_dict[event_for_spam])    #—Å–ø–∏—Å–æ–∫ –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        for i in range(len(list_of_spam)):
            list_of_spam_niks.append(user_names_chatid_dict[int(list_of_spam[i])])  #–¥–µ–ª–∞—é —Å–ø–∏—Å–æ–∫ –Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        myregistrationbtn = types.KeyboardButton('–†–∞–∑–æ—Å–ª–∞—Ç—å')           #–ø–∞—Ä–∞ –∫–Ω–æ–ø–æ–∫
        sendreminderbtn = types.KeyboardButton('–ì–∞–ª—è, –û–¢–ú–ï–ù–ê!!!')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(myregistrationbtn, sendreminderbtn)
        try:                                                                #–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ —Å–æ–±–ª—é–ª —É—Å–ª–æ–≤–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            bot.send_message(user_id, text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
            bot.send_message(user_id, message_for_spam.text)
            bot.send_message(user_id, text='–í–æ—Ç —ç—Ç–∏–º —Å–∞–ª–∞—Ç–∏–∫–∞–º:')
            send=bot.send_message(user_id, text=', '.join(list_of_spam_niks), reply_markup=markup)
            bot.register_next_step_handler(send, send_spam, message_for_spam, list_of_spam, list_of_spam_niks) #–∂–¥—É –ø–æ–¥—Ç–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç—Å—ã–ª–∞—é –≤ —Å–ª–µ–¥. –º–µ—Ç–æ–¥
        except Exception:
            bot.send_photo(user_id, photo=open('huinia.jpg', 'rb'))         #–Ω–∞ —Å–ª—É—á–∞–π –Ω–∞—ë–±–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏ - —Å–º–µ—à–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
            bot.register_next_step_handler(message_for_spam, ask_send_spam, event_for_spam) #–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Ç–æ–¥

def send_spam(message, message_for_spam, list_of_spam, list_of_spam_niks):  #—Å–æ–ø—Å–Ω–æ —Ä–∞—Å—Å—ã–ª–∫–∞
    user_id = message.chat.id
    if message.text ==  '–†–∞–∑–æ—Å–ª–∞—Ç—å':
        for i in range(len(list_of_spam)):                                  #–∫–∞–∂–¥–æ–º—É —á–µ–ª—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è –±–∞—Ö–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(list_of_spam[i], text=message_for_spam.text)
        bot.send_message(user_id, text='–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:')         #–æ—Ç—á–∏—Ç—ã–≤–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        bot.send_message(user_id, text=message_for_spam.text)
        bot.send_message(user_id, text='–≠—Ç–∏–º —Å–∞–ª–∞—Ç–∏–∫–∞–º: '+', '.join(list_of_spam_niks))
        write_in_log_regular_events(inlogtxt=message.from_user.username + ' –¥–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É')
        main_menu(message)
    elif message.text == '–ì–∞–ª—è, –û–¢–ú–ï–ù–ê!!!':
        main_menu(message)
    else:
        send = bot.send_photo(user_id, photo=open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'))
        bot.register_next_step_handler(send, send_spam, message_for_spam, list_of_spam, list_of_spam_niks) #–µ—Å–ª–∏ –Ω–µ –æ—Ç–º–µ–Ω–∞ –∏ –Ω–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Ç–æ–¥

# # # # # # # # # # # # # # # # # # # # # # # # # # # # —Ç—É—Ç –æ–≥—Ä–æ–º–Ω—ã–π –±–ª–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

def chose_event_for_reg(message, avalible_event_name_event_id_dict_full, avalible_event_name_event_id_dict_poor, reg_event_ID, reg_event_name, user_nick, user_name, markup):

    if bot.get_chat_member(-1001855787678, message.chat.id).status!='left':  #966176056
        registriruem = True
    elif message.text in list(avalible_event_name_event_id_dict_poor.keys()):
        registriruem = True
    else:
        bot.send_message(message.chat.id, text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≤—ã–±—Ä–∞–ª, —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∞–ª–∞—Ç–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–ª—É–± —ç–Ω—Å–∞–ª–∞–¥—ã.\n \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–π –ø—Ä–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—Å–µ –ø—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É"')
        registriruem = False

    if message.text in list(avalible_event_name_event_id_dict_full.keys()) and registriruem==True:
        reg_event_name = message.text.strip()
        reg_event_ID = avalible_event_name_event_id_dict_full[reg_event_name]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(nobtn, yesbtn, mainmenubtn)
        send = bot.send_message(message.chat.id, text='–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é @'+message.from_user.username+'?', reply_markup=markup)
        bot.register_next_step_handler(send, use_your_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–û—Ç–º–µ–Ω–∞' or registriruem==False:
        main_menu(message)
    else:
        send=bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.send_message(message.chat.id, text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –∫–∞–∂–µ—Ç—Å—è —è –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        bot.register_next_step_handler(send, chose_event_for_reg, avalible_event_name_event_id_dict_full, avalible_event_name_event_id_dict_poor, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def use_your_username (message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–î–∞':
        user_nick = '@'+message.from_user.username.lower()
        call_user_event_names_dict()
        alreadyregistred=False
        if user_nick in user_event_names_dict.keys():
            if reg_event_name in user_event_names_dict[user_nick]:
                bot.send_message(message.chat.id, text=user_nick + ' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '+reg_event_name)
                main_menu(message)
                alreadyregistred=True
        find_it(user_nick)
        user_name = find_it.user_name
        if user_name is None and alreadyregistred==False:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(mainmenubtn)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –∏–º—è:', reply_markup=markup)
            bot.register_next_step_handler(message, use_new_name, reg_event_ID, reg_event_name, user_nick, user_name, markup)
        elif alreadyregistred==False:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(nobtn, yesbtn, mainmenubtn)
            bot.send_message(message.chat.id, text='–¢—ã '+user_name+'?', reply_markup=markup)
            bot.register_next_step_handler(message, are_you, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–ù–µ—Ç':
        types.ReplyKeyboardRemove()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(mainmenubtn)
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –Ω–∏–∫:', reply_markup=markup)
        bot.register_next_step_handler(message, use_new_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        main_menu(message)
    else:
        bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.send_message(message.chat.id, text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –∫–∞–∂–µ—Ç—Å—è —è –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        bot.register_next_step_handler(message, use_your_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def use_new_username (message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        main_menu(message)
    elif user_name!=None:
        #registration_on_event_chek(message, reg_event_ID, reg_event_name, user_nick, user_name, markup)
        send_for_reg(message, reg_event_ID, reg_event_name, user_nick, user_name)
    elif message.text != None:
        user_nick = message.text
        if user_nick[0] != '@':
            user_nick = '@' + user_nick
        call_user_event_names_dict()
        if user_nick in user_event_names_dict.keys():
            if reg_event_name in user_event_names_dict[user_nick]:
                bot.send_message(message.chat.id, text=user_nick + ' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ' + reg_event_name)
                main_menu(message)
        else:
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –∏–º—è:', reply_markup=markup)
            bot.register_next_step_handler(message, use_new_name, reg_event_ID, reg_event_name, user_nick, user_name, markup)

    else:
        bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.send_message(message.chat.id, text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –∫–∞–∂–µ—Ç—Å—è —è –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        bot.register_next_step_handler(message, use_new_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def use_new_name (message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        main_menu(message)
    elif message.text!=None:
        user_name=message.text
        send_for_reg(message, reg_event_ID, reg_event_name, user_nick, user_name)

        #markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        #markup.add(changebtn, yesbtn, mainmenubtn)
        #bot.send_message(message.chat.id, text='–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ç–∞–∫? \n –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: '+reg_event_name+' \n –ù–∏–∫: '+user_nick+' \n –ò–º—è: '+user_name, reply_markup=markup)
        #bot.register_next_step_handler(message, registration_on_event_chek, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    else:
        bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.send_message(message.chat.id, text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –∫–∞–∂–µ—Ç—Å—è —è –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        bot.register_next_step_handler(message, use_new_name, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def registration_on_event_chek(message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–î–∞':
        with open('user_names_names.pkl', 'rb') as f1:
            user_names_user_names_dict = pickle.load(f1)
            user_nick_for_dict = user_nick.lower().strip()
            user_names_user_names_dict[user_nick_for_dict]=user_name
            user_names_user_names_dict[user_name]=user_nick_for_dict
            with open('user_names_names.pkl', 'wb') as f:
                pickle.dump(user_names_user_names_dict, f, pickle.HIGHEST_PROTOCOL)
            send_for_reg(message, reg_event_ID, reg_event_name, user_nick, user_name)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –∏–ª–∏ –∏–º—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(changenamebtn, changenickbtn, mainmenubtn)
        bot.send_message(message.chat.id, text='–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(message, change_ik_or_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        main_menu(message)
    else:
        bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.send_message(message.chat.id, text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –∫–∞–∂–µ—Ç—Å—è —è –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        bot.register_next_step_handler(message, registration_on_event_chek, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def change_ik_or_username (message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(mainmenubtn)
        what=0
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è', reply_markup=markup)
        bot.register_next_step_handler(message, change_ik_or_username_get, reg_event_ID, reg_event_name, user_nick, user_name, what)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(mainmenubtn)
        what=1
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫:', reply_markup=markup)
        bot.register_next_step_handler(message, change_ik_or_username_get, reg_event_ID, reg_event_name, user_nick, user_name, what)
    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        main_menu(message)
    else:
        bot.send_photo(message.chat.id, photo=open('wat/' + str(random.randrange(1, 6)) + '.jpeg', 'rb'), reply_markup=markup)
        bot.register_next_step_handler(message, change_ik_or_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def change_ik_or_username_get (message, reg_event_ID, reg_event_name, user_nick, user_name, what):
        if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            main_menu(message)
        elif what==0:
            user_name=message.text
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(changebtn, yesbtn, mainmenubtn)
            bot.send_message(message.chat.id,
                                    text='–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ç–∞–∫? \n –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ' + reg_event_name + ' \n –ù–∏–∫: ' + user_nick + ' \n –ò–º—è: ' + user_name,
                                    reply_markup=markup)
            bot.register_next_step_handler(message, registration_on_event_chek, reg_event_ID, reg_event_name, user_nick,
                                           user_name, markup)
        elif what==1:
            new_user_nick=message.text
            if new_user_nick[0] != '@':
                new_user_nick = '@' + new_user_nick
            old_user_nick=user_nick
            if old_user_nick[0] != '@':
                old_user_nick = '@' + old_user_nick
            call_user_event_names_dict()
            if new_user_nick in user_event_names_dict.keys():
                if reg_event_name in user_event_names_dict[new_user_nick]:
                    bot.send_message(message.chat.id,
                                     text=new_user_nick + ' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ' + reg_event_name)
                    user_nick=old_user_nick
                else:
                    user_nick=new_user_nick
            else:
                user_nick = new_user_nick
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(changebtn, yesbtn, mainmenubtn)
            bot.send_message(message.chat.id,
                                    text='–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ç–∞–∫? \n –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ' + reg_event_name + ' \n –ù–∏–∫: ' + user_nick + ' \n –ò–º—è: ' + user_name,
                                    reply_markup=markup)
            bot.register_next_step_handler(message, registration_on_event_chek, reg_event_ID, reg_event_name, user_nick,
                                           user_name, markup)

def find_it(user_nick):
    airtable = Airtable(airtale_app, airtable_reg_tbl, api_key_R)
    if user_nick[0] == '@':
        user_nick_w_o = user_nick[1:]
    else:
        user_nick_w_o = user_nick
        user_nick = '@'+user_nick
    try:
        with open('user_names_names.pkl', 'rb') as f1:
            user_names_user_names_dict=pickle.load(f1)
            find_it.user_name = user_names_user_names_dict[user_nick.lower()]
    except Exception:
        try:
            find_it.user_name = airtable.search("You login in TG (reg)", user_nick_w_o)[0]['fields']['–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)']
        except Exception:
            try:
                find_it.user_name = airtable.search("You login in TG (reg)", user_nick)[0]['fields']['–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)']
            except Exception:
                find_it.user_name = None

def are_you (message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–î–∞':
        send_for_reg(message, reg_event_ID, reg_event_name, user_nick, user_name)

        #markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        #markup.add(changebtn, yesbtn, mainmenubtn)
        #bot.send_message(message.chat.id, text='–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ç–∞–∫?\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: '+reg_event_name+'\n–ù–∏–∫: '+user_nick+'\n–ò–º—è: '+user_name, reply_markup=markup)
        #bot.register_next_step_handler(message, registration_on_event_chek, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–ù–µ—Ç':
        types.ReplyKeyboardRemove()
        markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(mainmenubtn)
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –∏–º—è:', reply_markup=markup)
        bot.register_next_step_handler(message, use_new_name, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    else:
        bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.send_message(message.chat.id, text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –∫–∞–∂–µ—Ç—Å—è —è –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        bot.register_next_step_handler(message, are_you, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def send_for_reg(message, reg_event_ID, reg_event_name, user_nick, user_name):
    airtable = Airtable(airtale_app, airtable_reg_tbl, api_key_RW)
    get_registration_list()
    if reg_event_name not in get_registration_list.avalible_event_name_event_id_dict_full.keys():
        bot.send_message(message.chat.id,
                     text='–í–æ—Ç –±–ª–∏–Ω! –í–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫—Ç–æ-—Ç–æ –ø–æ–¥—Ä–µ–∑–∞–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ –Ω–∞ '+ reg_event_name+ '(((( –ü—Ä–æ—Å—Ç–∏' )
    else:
        airtable.insert(
            {you_login_in_TG_field: user_nick, event_for_reg_field: reg_event_ID.split(), whats_your_name_field: user_name})
        call_user_event_names_dict()
        if user_nick[0]!='@':
            user_nick='@'+user_nick
        if reg_event_name in user_event_names_dict[user_nick]:
            bot.send_message(message.chat.id,
                             text=user_nick+' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∞ –Ω–∞ ' + reg_event_name)
            bot.send_message(message.chat.id,
                             text='üí∂ –ï—Å–ª–∏ —Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –µ—Å—Ç—å –≤ –∞–Ω–æ–Ω—Å–µ), —Ç—ã –º–æ–∂–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –≤–æ—Ç —Ç—É—Ç üëá \nhttps://revolut.me/iuliiaqj3y \n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —Å–≤–æ–π –Ω–∏–∫–Ω—ç–π–º –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.', disable_web_page_preview=True)
        write_in_log_regular_events(inlogtxt='@' + message.from_user.username + ' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª_–∞ ' + user_nick + ", " + user_name + " –Ω–∞ " + reg_event_name)  # –ø–∏—Å—å–∫–∞ –≤ –ª–æ–≥
    main_menu(message)

def chose_feedack_event(message):
    airtable = Airtable(airtale_app, event_tbl, api_key_R)
    response_feedack=airtable.get_all(view=event_tbl_for_feedback_view)
    name_event = {}
    for i in range(len(response_feedack)):
        eventname = response_feedack[i]['fields']['Name event']
        eventid = response_feedack[i]['id']
        name_event[eventname]=eventid
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(len(name_event.keys())):
        btn = types.KeyboardButton('"' + list(name_event.keys())[i] + '"')
        markup.add(btn)
    markup.add(backbtn)
    bot.send_message(message.chat.id,
                     text='–í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', reply_markup=markup)
    bot.register_next_step_handler(message, give_feedback, name_event)

def give_feedback(message, name_event):
    if message.text[1 : -1] in name_event.keys():
        event_name=message.text[1 : -1]
        airtable = Airtable(airtale_app, airtable_reg_tbl, api_key_R)
        chat_ids=[]
        nicks=''
        dis_nicks = airtable.search('Event for reg', event_name)
        for i in range(len(dis_nicks)):
            try:
                nick=dis_nicks[i]['fields']['You login in TG (reg)'].lower()
                if nick[0]!='@':
                    nick='@'+nick
                chat_ids.append(user_names_chatid_dict[nick])
                nicks += nick + ', '
            except:
                a=1
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(yesbtn, mainmenubtn)
        bot.send_message(message.chat.id, text='–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π, —É–¥–∞–ª–∏ –∑–∞–ø—è—Ç—ã–µ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —ç–≤–µ–Ω—Ç–∞–≤ –≤ —ç–π—Ä—Ç—ç–π–±–ª–µ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –í–µ—Ä–Ω—É—Å—å –ø–æ–ø—Ä–æ–±—É—é –ø–æ—Ñ–∏–∫—Å–∏—Ç—å): '+nicks,reply_markup=markup)
        event_id = name_event[event_name]
        bot.register_next_step_handler(message, send_feedback, chat_ids, event_name, event_id, nicks)
    elif message.text=='–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    else:
        bot.send_photo(message.chat.id, photo=open('wat/' + str(random.randrange(1, 6)) + '.jpeg', 'rb'))
        bot.send_message(message.chat.id,
                         text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –∫–∞–∂–µ—Ç—Å—è —è –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')
        bot.register_next_step_handler(message, give_feedback, name_event)

def send_feedback(message, chat_ids, event_name, event_id, nicks):
    if message.text=='–î–∞':
        feedback_text = open('./feedback.txt', 'r', encoding='UTF-8').read()

        markup=InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ '+event_name, callback_data='05/*/'+event_id))

        for i in range(len(chat_ids)):
            bot.send_message(chat_ids[i], text=feedback_text.replace("eventame", event_name, 1), parse_mode='Markdown', disable_web_page_preview=True, reply_markup=markup)
        if message.chat.id not in chat_ids:
            bot.send_message(message.chat.id, text=feedback_text.replace("eventame", event_name, 1), parse_mode='Markdown', disable_web_page_preview=True, reply_markup=markup)
        bot.send_message(message.chat.id, text='–û—Ç–ø—Ä–∞–≤–∏–ª')
        write_in_log_regular_events(inlogtxt='@'+message.from_user.username.lower() + ' –æ—Ç–ø—Ä–∞–≤–∏–ª_–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∏–¥–±—ç–∫: '+nicks)
        main_menu(message)
    elif message.text=='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        main_menu(message)
    else:
        bot.send_photo(message.chat.id, photo=open('wat/' + str(random.randrange(1, 6)) + '.jpeg', 'rb'))
        bot.register_next_step_handler(message, send_feedback, chat_ids, event_name, event_id, nicks)
def feedback_preseting(message):
    feedback_dict[message.chat.id] = {'event_id': str,
                                      'recomendacion': int,
                                      'what_did_you_like': list,
                                      'lishnee': str,
                                      'comment': str,
                                      'user_name': str,
                                      'event_name': str}
    call_event_for_feedback_dict()
    name_event=event_names_for_feedback_dict
    if message.from_user.username is not None and message.chat.id in user_names_chatid_dict:
        find_it(message.from_user.username)
        feedback_dict[message.chat.id]['user_name'] = find_it.user_name
    feedback(message, name_event, step=0, value=None)
def feedback(message, name_event, step, value):
    if value is not None and step<=len(list(feedback_dict[message.chat.id].keys())):
        feedback_dict[message.chat.id][list(feedback_dict[message.chat.id].keys())[step]]=value
        value=None
    if step==len(list(feedback_dict[message.chat.id].keys()))-1:
        bot.send_message(message.chat.id,text='–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤!!! –ú—ã —Ü–µ–Ω–∏–º —Ç–∞–∫–æ–µ –∏ –±—É–¥–µ–º —Å—Ç–∞—Ä–∞—Ç—å—Å—è –±—ã—Ç—å –ª—É—á—à–µ!')
        main_menu(message)
        try:
            write_feedback_at_airtale(message,
                                      event_id=feedback_dict[message.chat.id]['event_id'].split(),
                                      recomendacion=int(feedback_dict[message.chat.id]['recomendacion']),
                                      what_did_you_like=feedback_dict[message.chat.id]['what_did_you_like'],
                                      lishnee=feedback_dict[message.chat.id]['lishnee'],
                                      comment=feedback_dict[message.chat.id]['comment'],
                                      user_name=feedback_dict[message.chat.id]['user_name'],
                                      event_name=feedback_dict[message.chat.id]['event_name'],
                                      misunderstand=False)
        except Exception as ex:
            print(ex)
    else:
        step_value=feedback_dict[message.chat.id][list(feedback_dict[message.chat.id].keys())[step]]
        if type(step_value) is type:  # –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, —á—Ç–æ –ø—É—Å—Ç–æ–π –µ—Å–ª–∏ –¥–∞ –∏–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if step == 0:
                for i in range(len(name_event)):
                    btn = types.KeyboardButton(list(name_event.keys())[i])
                    markup.add(btn)
                markup.add(backbtn)
                send = bot.send_message(message.chat.id, text=feedback_messages_list[step], reply_markup=markup)
                bot.register_next_step_handler(send, feedback_steps, name_event, step)
            elif step == 2:
                markup.add(mainmenubtn, readybtn)
                bot.send_message(message.chat.id, text=feedback_messages_list[step], reply_markup=markup)
                what_did_you_like_list[message.chat.id] = ['‚ûñ–§–æ—Ä–º–∞—Ç', '‚ûñ–ü–ª–æ—â–∞–¥–∫–∞', '‚ûñ–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞', '‚ûñ–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
                                                           '‚ûñ–õ—é–¥–∏']
                feedback_like_list(message, first=True)
            else:
                if step == 1:
                    markup.add(onetotenbtn[0],
                               onetotenbtn[1],
                               onetotenbtn[2],
                               onetotenbtn[3],
                               onetotenbtn[4],
                               onetotenbtn[5],
                               onetotenbtn[6],
                               onetotenbtn[7],
                               onetotenbtn[8],
                               onetotenbtn[9],
                               onetotenbtn[10],
                               mainmenubtn)
                else:
                    markup.add(mainmenubtn, skipbtn)
                send = bot.send_message(message.chat.id, text=feedback_messages_list[step], reply_markup=markup)
                bot.register_next_step_handler(send, feedback_steps, name_event, step)
        elif type(step_value) is not type:  # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è—é
            step += 1
            feedback(message, name_event, step, value)

def feedback_steps(message, name_event, step):
        if message.text=='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text=='–û—Ç–º–µ–Ω–∞':
            main_menu(message)
        elif step == 0:
            if message.text in name_event.keys():
                value=name_event[message.text]
                feedback_dict[message.chat.id]['event_name']=message.text
                feedback(message, name_event, step, value=value)
            else:
                bot.send_photo(message.chat.id, photo=open('wat/' + str(random.randrange(1, 6)) + '.jpeg', 'rb'))
                bot.send_message(message.chat.id,
                                 text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –∫–∞–∂–µ—Ç—Å—è —è –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –∏–ª–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')
                bot.register_next_step_handler(message, feedback_steps, name_event, step)
        elif step== 1:
            try:
                if 0<=int(message.text)<=10:
                    value = message.text
                    feedback(message, name_event, step, value=value)
                else:
                    send = bot.send_message(message.chat.id, text='–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 10 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ')
                    bot.register_next_step_handler(send, feedback_steps, name_event, step=step)
            except:
                send = bot.send_message(message.chat.id, text='–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 10 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ')
                bot.register_next_step_handler(send, feedback_steps, name_event, step=step)
        elif step==2:
            if message.text == '–ì–æ—Ç–æ–≤–æ':
                i=len(what_did_you_like_list[message.chat.id])-1
                while i>=0:
                    if what_did_you_like_list[message.chat.id][i][0]=='‚úÖ':
                        what_did_you_like_list[message.chat.id][i]=what_did_you_like_list[message.chat.id][i][1:]
                    else:
                        what_did_you_like_list[message.chat.id].pop(i)
                    i-=1
                value=what_did_you_like_list[message.chat.id]
                what_did_you_like_list[message.chat.id]=[]
                feedback(message, name_event, step, value)
            else:
                bot.send_photo(message.chat.id, photo=open('wat/' + str(random.randrange(1, 6)) + '.jpeg', 'rb'))
                bot.send_message(message.chat.id,
                                 text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –∫–∞–∂–µ—Ç—Å—è —è –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –∏–ª–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')
                bot.register_next_step_handler(message, feedback_steps, name_event, step)
        elif message.text=='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' and step == 3 or step == 4 or step == 5:
            feedback(message, name_event, step, value='-')
        else:
            value=message.text
            if value==None:
                bot.send_photo(message.chat.id, photo=open('wat/' + str(random.randrange(1, 6)) + '.jpeg', 'rb'))
                bot.send_message(message.chat.id,
                                 text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç, –∫–∞–∂–µ—Ç—Å—è —è –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –∏–ª–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –≤–µ–¥—É —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, —Ä–µ–∞–≥–∏—Ä—É—é –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ - –ø–µ—Ä–µ–∑–∞—É—Å—Ç–∏ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start')
            feedback(message, name_event, step, value=value)
def feedback_like_list(message, first):
    markup=InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton(what_did_you_like_list[message.chat.id][0], callback_data='00'),
               InlineKeyboardButton(what_did_you_like_list[message.chat.id][1], callback_data='01'),
               InlineKeyboardButton(what_did_you_like_list[message.chat.id][2], callback_data='02'),
               InlineKeyboardButton(what_did_you_like_list[message.chat.id][3], callback_data='03'),
               InlineKeyboardButton(what_did_you_like_list[message.chat.id][4], callback_data='04'),
               )
    if first:
        send=bot.send_message(message.chat.id, text='–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ:', reply_markup=markup)
        bot.register_next_step_handler(send, feedback_steps, name_event=[], step=2)
    else:
        bot.edit_message_reply_markup(message.chat.id, message.message_id, reply_markup=markup)
def fast():
    print('asdasdasdasasdasasaszxczxczxc')
@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    call_data=call.data.split('/*/')
    btnnumber=int(call_data[0])
    if 0<=btnnumber<=4:
        if what_did_you_like_list[call.message.chat.id][btnnumber][0]=='‚ûñ':
            what_did_you_like_list[call.message.chat.id][btnnumber] = what_did_you_like_list[call.message.chat.id][btnnumber][1:]
            what_did_you_like_list[call.message.chat.id][btnnumber] = '‚úÖ' +what_did_you_like_list[call.message.chat.id][btnnumber]
            feedback_like_list(call.message, first=False)
        else:
            what_did_you_like_list[call.message.chat.id][btnnumber] = what_did_you_like_list[call.message.chat.id][btnnumber][1:]
            what_did_you_like_list[call.message.chat.id][btnnumber] = '‚ûñ' + what_did_you_like_list[call.message.chat.id][btnnumber]
            feedback_like_list(call.message, first=False)
    elif btnnumber == 5:
        find_it(call.from_user.username)
        user_name = find_it.user_name
        call_event_for_feedback_dict()
        event_name=event_ids_for_feedback_dict[call_data[1]]
        feedback_dict[call.message.chat.id] = {'event_id': call_data[1],
                                          'recomendacion': int,
                                          'what_did_you_like': list,
                                          'lishnee': str,
                                          'comment': str,
                                          'user_name': str,
                                          'event_name': event_name}
        if user_name is not None:
            feedback_dict[call.message.chat.id]['user_name']=user_name
        feedback(message=call.message, name_event=call_data[1], step=0, value=None)

def write_feedback_at_airtale(message, event_id, recomendacion, what_did_you_like, lishnee, comment, user_name, event_name, misunderstand):
    airtable = Airtable(airtale_app, airtable_feedback_tbl, api_key_RW)
    if recomendacion==0:
        recomendacion=None

    if message.from_user.username==None:
        nick='noname'
    else:
        nick = '@' + message.from_user.username.lower()
    airtable.insert({
        you_login_in_TG_field_feedback: nick,
        name_event_field_feedback: event_id,
        recomendacion_field_feedback: recomendacion,
        what_did_you_like_field_feedback: what_did_you_like,
        lishnee_field_feedback: lishnee,
        commet_field_feedback: comment,
        whats_your_name_field_feedback: user_name,
    })
    if misunderstand==False:
        write_in_log_regular_events(inlogtxt=nick + ' –¥–∞–ª_–∞ –û–° –ø—Ä–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ' + event_name)
def error():
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
        #bot.polling(none_stop=True, interval=0)

    except Exception as ex:
        write_in_log_error(inlogtxt=str(ex))
        bot.send_message(214130351, text='estoy cayendo! \n'+str(ex))
        error()
error()