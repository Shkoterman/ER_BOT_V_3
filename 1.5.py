import datetime
import telebot
import requests
import pickle
import random

from datetime import *
from airtable import *
from config_file_test import *
from telebot import types
from telegram import ParseMode
print('bot has started')
print(BD_Mode)

bot = telebot.TeleBot('5865283503:AAHI8sUoRRzDh3d0w1TpNnY35ymAqDTv5A4')  # this is test
#bot = telebot.TeleBot('5806434689:AAG383Pr1XxSpl4vjJ9rNFR27xJJA19bs0g') # this is prod

# do buttons

btn1 = types.KeyboardButton("–ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
btn2 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
btn3 = types.KeyboardButton("test")
btn4 = types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
btn5 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è')
btn6 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫')
backbtn = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
yesbtn = types.KeyboardButton('–î–∞')
nobtn = types.KeyboardButton('–ù–µ—Ç')
changebtn = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –∏–ª–∏ –∏–º—è')
feedbackbtn = types.KeyboardButton('–†–∞–∑–æ—Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Ñ–∏–¥–±—ç–∫–∞')
adminlist = open('admin_list.txt', 'r', encoding='UTF-8').read().split('\n')


# create dicts that coteins users nicks and all them events
user_event_names_dict = {}                      # {nick: event_name, event_name}
event_name_event_id_dict = {}                   # {event_id: event_name <-/-> event_name: event_id}
user_names_chatid_dict = {}                     # {nick: chatid <-/-> chatid: nick}
with open('user_names_chatid.pkl', 'rb') as f:  # load DB of users
    user_names_chatid_dict = pickle.load(f)
event_names_chatid_dict = {}                     # {event_name: chatid, chatid}


user_name = {}
AdminAccess = {}
eventList = {}
eventIDList = {}
user_list = {}
pnick = {}

def request_user_event_names():
    user_event_names_dict.clear()
    response_reg = requests.get(endpoint_reg, headers=headers_R)
    database_reg = response_reg.json()
    database_reg_len = len(database_reg['records'])
    response_event = requests.get(endpoint_future_event, headers=headers_R)
    database_event = response_event.json()
    database_event_len = len(database_event['records'])

    # create dict {event_id: event_name <-/->event_name:event_id}
    for i in range(database_event_len):
        event_id = database_event['records'][i]['id']
        event_name = database_event['records'][i]['fields']['Name event']
        event_name_event_id_dict[event_id] = event_name.strip()
        event_name_event_id_dict[event_name.strip()] = event_id
    
    # c reate dict {nick: event_name, event_name}
    for i in range(database_reg_len):
        try:
            nick = database_reg['records'][i]['fields']['You login in TG (reg)'].lower().replace(" ", "")
            event_id = ''.join(database_reg['records'][i]['fields']['Event for reg'])
            event_name = event_name_event_id_dict[event_id].split('{;}')

            if nick[0] != '@':
                nick = "@"+nick
            if nick not in user_event_names_dict.keys():
                user_event_names_dict[nick] = event_name
            if ''.join(event_name) not in user_event_names_dict[nick]:
                user_event_names_dict[nick].append(event_name_event_id_dict[event_id])

            # create dict {event_name: chatid, chatid}
            if nick in user_names_chatid_dict:
                chatid = str(user_names_chatid_dict[nick]).split('{;}')
                if ''.join(event_name) not in event_names_chatid_dict:
                    event_names_chatid_dict[''.join(event_name)] = chatid
                elif ''.join(chatid) not in event_names_chatid_dict[''.join(event_name)]:
                    event_names_chatid_dict[''.join(event_name)].append(''.join(chatid))
        except:
            i += 1
    print('BD –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')

request_user_event_names()

@bot.message_handler(commands=["start"])
def Start(m):
    
    user_id = m.chat.id
    nick = m.from_user.username
    print(m.from_user.username,  ' –Ω–∞–∂–∞–ª \start')

    # call markup
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(btn1, btn4)
    if m.from_user.username in adminlist:
        print(m.from_user.username, '–≤–∑—è–ª(–∞) –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø')
        markup.add(btn2, btn3, feedbackbtn)
    
    # send helo text
    hello_text=open('./hello.txt', 'r', encoding='UTF-8').read()
    bot.send_message(m.from_user.id, text="".join(hello_text), parse_mode=ParseMode.HTML, reply_markup=markup,disable_web_page_preview=True)

    add_user(m)
        
@bot.message_handler(content_types=["text"])
def handle_text(message):
    user_id = message.chat.id

    # registration check
    if message.text.strip() == '–ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏':
        try:
            add_user(message)
            print(user_event_names_dict)
            request_user_event_names()
            print(user_event_names_dict)
            user_id = message.chat.id
            pnick[user_id] = '@'+message.from_user.username.lower()
            if pnick[user_id] in user_event_names_dict:
                eventList[user_id] = user_event_names_dict[pnick[user_id]]
                bot.send_message(user_id, text="–í–æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞):")
                bot.send_message(user_id, text="\n".join(eventList[user_id]))
                eventList[user_id] = []
            else:
                bot.send_message(user_id, text="–û–≥–æ! –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ(")
                
        except Exception as ex:
            bot.send_message(user_id, text="–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∏–∫ —Å @")
            main_menu(message)
        print(message.from_user.username,  ' –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä—Ü–∏–∏')

    # rassylka
    elif message.text.strip() == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' and message.from_user.username in adminlist:
        print(message.from_user.username, '–≤–∑—è–ª(–∞) –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø')
        user_id = message.chat.id
        eventList[user_id] = list(event_names_chatid_dict.keys())
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(len(eventList[user_id])):
            btn = types.KeyboardButton(eventList[user_id][i])
            markup.add(btn)
        markup.add(backbtn)
        send=bot.send_message(user_id, text='–í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', reply_markup=markup)
        bot.register_next_step_handler(send, chose_event_for_spam)

    # registration
    elif message.text.strip() == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
        get_registration_list()
        if message.from_user.username==None:
            bot.send_message(message.chat.id, text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∏–∫ —Å @')
            main_menu(message)

        elif get_registration_list.avalible_event_name_event_id_dict == {}:
            bot.send_message(message.chat.id, text='–û, –±–ª–∏–Ω! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø–∏—è—Ç–∏–π(((')
            main_menu(message)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for i in range(len(get_registration_list.avalible_event_name_event_id_dict)):
                btn = types.KeyboardButton(list(get_registration_list.avalible_event_name_event_id_dict.keys())[i])
                markup.add(btn)
            markup.add(backbtn)
            send=bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', reply_markup=markup)
            reg_event_ID = None
            reg_event_name = None
            user_nick = None
            user_name = None
            bot.register_next_step_handler(send, chose_event_for_reg, get_registration_list.avalible_event_name_event_id_dict, reg_event_ID, reg_event_name, user_nick, user_name, markup)

    elif message.text.strip() == 'test':
        give_feedback()

    elif message.text.strip() == '–†–∞–∑–æ—Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Ñ–∏–¥–±—ç–∫–∞':
        give_feedback()

    else:
        bot.send_message(message.chat.id, text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–ª–∏ —á–∏—Ç–∞—Ç—åüòî –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ - –ø–∏—à–∏—Ç–µ @julia_sergina')
        text_to_log = datetime.now().strftime("%d-%m-%Y %H:%M") + ' @' + message.from_user.username + ' sent:\n' + message.text+ '\n'
        main_menu(message)
        with open('log.txt', 'r+') as f:
            f.seek(0, 2)  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            f.write(text_to_log)  # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–ø–∏—Å—å


def add_user(m):
    # add to dict if there is no {nick: chatid <-/-> chatid: nick}
    nick = m.from_user.username
    if nick==None:
        nick = '@nobody'+str(m.chat.id)
    user_id = m.chat.id
    if nick[0]!='@':
        nick = "@"+nick
    if nick not in user_names_chatid_dict or user_id not in user_names_chatid_dict:
        user_names_chatid_dict[nick.lower()] = user_id
        user_names_chatid_dict[user_id]=nick.lower()
        print(nick, '–¥–æ–±–∞–≤–∏–ª—Å—è –≤ —é–∑–µ—Ä–ª–∏—Å—Ç')
    with open('user_names_chatid.pkl', 'wb') as f:
            pickle.dump(user_names_chatid_dict, f, pickle.HIGHEST_PROTOCOL)  # and save

def chose_event_for_spam(message):
    user_id = message.chat.id
    eventList[user_id] = list(event_names_chatid_dict.keys())
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if message.text in eventList[user_id]:
        event_for_spam = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(backbtn)
        send = bot.send_message(user_id, text='–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ –¥–µ–ª–∞–π –∞–±–æ–Ω–¥–µ–¥ —Å—Å—ã–ª–æ–∫, –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –ø—Ä–æ—á.', reply_markup=markup)
        bot.register_next_step_handler(send, ask_send_spam, event_for_spam)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    else:
        send=bot.send_photo(user_id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.register_next_step_handler(send, chose_event_for_spam)
        
def ask_send_spam(message, event_for_spam):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    else:
        user_id = message.chat.id
        message_for_spam = message
        list_of_spam_niks  = []
        list_of_spam = list(event_names_chatid_dict[event_for_spam])
        for i in range(len(list_of_spam)):
            list_of_spam_niks.append(user_names_chatid_dict[int(list_of_spam[i])])

        btn1 = types.KeyboardButton('–†–∞–∑–æ—Å–ª–∞—Ç—å')
        btn2 = types.KeyboardButton('–ì–∞–ª—è, –û–¢–ú–ï–ù–ê!!!')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn1, btn2)
        
        try:
            bot.send_message(user_id, text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
            bot.send_message(user_id, message_for_spam.text)
            bot.send_message(user_id, text='–í–æ—Ç —ç—Ç–∏–º —Å–∞–ª–∞—Ç–∏–∫–∞–º:')
            send=bot.send_message(user_id, text=', '.join(list_of_spam_niks), reply_markup=markup)
            bot.register_next_step_handler(send, send_spam, message_for_spam, list_of_spam, list_of_spam_niks)
        except Exception as ex:
            bot.send_photo(user_id, photo=open('huinia.jpg', 'rb'))
            bot.register_next_step_handler(message_for_spam, ask_send_spam, event_for_spam)
def send_spam(message, message_for_spam, list_of_spam, list_of_spam_niks):
    user_id = message.chat.id
    if message.text ==  '–†–∞–∑–æ—Å–ª–∞—Ç—å':
        for i in range(len(list_of_spam)):
            bot.send_message(list_of_spam[i], text=message_for_spam.text)
        bot.send_message(user_id, text='–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
        bot.send_message(user_id, text=message_for_spam.text)
        bot.send_message(user_id, text='–≠—Ç–∏–º —Å–∞–ª–∞—Ç–∏–∫–∞–º: '+', '.join(list_of_spam_niks))
        print(message.from_user.username,  ' –¥–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É')
        main_menu(message)
    elif message.text == '–ì–∞–ª—è, –û–¢–ú–ï–ù–ê!!!':
        main_menu(message)
    else:
        send = bot.send_photo(user_id, photo=open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'))
        bot.register_next_step_handler(send, send_spam, message_for_spam, list_of_spam, list_of_spam_niks)

def main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(btn1, btn4)
    if message.from_user.username in adminlist:
        AdminAccess[message.chat.id]=True
        markup.add(btn2, btn3, feedbackbtn)
        bot.send_message(message.chat.id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # 
def get_registration_list():
    response_avalible_event = requests.get(endpoint_avalible_event, headers=headers_R)
    database_avalible_event = response_avalible_event.json()
    database_avalible_event_len = len(database_avalible_event['records'])
    get_registration_list.avalible_event_name_event_id_dict={}
    for i in range(database_avalible_event_len):
        get_registration_list.avalible_event_name_event_id_dict[database_avalible_event['records'][i]['fields']['Name event'].strip()] = database_avalible_event['records'][i]['id']

def chose_event_for_reg(message, avalible_event_name_event_id_dict, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text in list(avalible_event_name_event_id_dict.keys()):
        reg_event_name = message.text.strip()
        reg_event_ID = avalible_event_name_event_id_dict[reg_event_name]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(nobtn, yesbtn, backbtn)
        send = bot.send_message(message.chat.id, text='–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é @'+message.from_user.username+'?', reply_markup=markup)
        bot.register_next_step_handler(send, use_your_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    else:
        send=bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.register_next_step_handler(send, chose_event_for_reg, avalible_event_name_event_id_dict, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def use_your_username (message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–î–∞':
        user_nick = '@'+message.from_user.username.lower()
        request_user_event_names()
        print(user_event_names_dict)
        alreadyregistred=False
        if user_nick in user_event_names_dict.keys():
            if reg_event_name in user_event_names_dict[user_nick]:
                bot.send_message(message.chat.id, text=user_nick + ' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '+reg_event_name)
                main_menu(message)
                alreadyregistred=True
        find_it(user_nick)
        user_name = find_it.user_name
        if user_name is None and alreadyregistred==False:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(backbtn)
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –∏–º—è:', reply_markup=markup)
            bot.register_next_step_handler(message, use_new_name, reg_event_ID, reg_event_name, user_nick, user_name, markup)
        elif alreadyregistred==False:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(nobtn, yesbtn, backbtn)
            bot.send_message(message.chat.id, text='–¢—ã '+user_name+'?', reply_markup=markup)
            bot.register_next_step_handler(message, are_you, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–ù–µ—Ç':
        types.ReplyKeyboardRemove()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(backbtn)
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –Ω–∏–∫:', reply_markup=markup)
        bot.register_next_step_handler(message, use_new_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    else:
        bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.register_next_step_handler(message, use_your_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)
        
def use_new_username (message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    elif user_name!=None:
        registration_on_event_chek(message, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text != None:
        user_nick = message.text
        if user_nick[0] != '@':
            user_nick = '@' + user_nick
        request_user_event_names()
        if user_nick in user_event_names_dict.keys():
            if reg_event_name in user_event_names_dict[user_nick]:
                bot.send_message(message.chat.id, text=user_nick + ' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ' + reg_event_name)
                main_menu(message)
        else:
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –∏–º—è:', reply_markup=markup)
            bot.register_next_step_handler(message, use_new_name, reg_event_ID, reg_event_name, user_nick, user_name, markup)

    else:
        bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.register_next_step_handler(message, use_new_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def use_new_name (message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    elif message.text!=None:
        user_name=message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(changebtn, yesbtn, backbtn)
        bot.send_message(message.chat.id, text='–ü–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ç–∞–∫: \n –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: '+reg_event_name+' \n –ù–∏–∫: '+user_nick+' \n –ò–º—è: '+user_name, reply_markup=markup)
        bot.register_next_step_handler(message, registration_on_event_chek, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    else:
        bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.register_next_step_handler(message, use_new_name, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def registration_on_event_chek(message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–î–∞':
        with open('user_names_names.pkl', 'rb') as f1:
            user_names_user_names_dict = pickle.load(f1)
            user_nick_for_dict = user_nick.lower().strip()
            user_names_user_names_dict[user_nick_for_dict]=user_name
            user_names_user_names_dict[user_name]=user_nick_for_dict
            with open('user_names_names.pkl', 'wb') as f:
                pickle.dump(user_names_user_names_dict, f, pickle.HIGHEST_PROTOCOL)
            send_for_reg(message, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –∏–ª–∏ –∏–º—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(btn5, btn6, backbtn)
        bot.send_message(message.chat.id, text='–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(message, change_ik_or_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    else:
        bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.register_next_step_handler(message, registration_on_event_chek, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def change_ik_or_username (message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(backbtn)
        what=0
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è', reply_markup=markup)
        bot.register_next_step_handler(message, change_ik_or_username_get, reg_event_ID, reg_event_name, user_nick, user_name, what, markup)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(backbtn)
        what=1
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫:', reply_markup=markup)
        bot.register_next_step_handler(message, change_ik_or_username_get, reg_event_ID, reg_event_name, user_nick, user_name, what, markup)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    else:
        bot.send_photo(message.chat.id, photo=open('wat/' + str(random.randrange(1, 6)) + '.jpeg', 'rb'), reply_markup=markup)
        bot.register_next_step_handler(message, change_ik_or_username, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def change_ik_or_username_get (message, reg_event_ID, reg_event_name, user_nick, user_name, what, markup):
        if message.text == '–û—Ç–º–µ–Ω–∞':
            main_menu(message)
        elif what==0:
            user_name=message.text
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(changebtn, yesbtn, backbtn)
            bot.send_message(message.chat.id,
                                    text='–ü–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ç–∞–∫: \n –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ' + reg_event_name + ' \n –ù–∏–∫: ' + user_nick + ' \n –ò–º—è: ' + user_name,
                                    reply_markup=markup)
            bot.register_next_step_handler(message, registration_on_event_chek, reg_event_ID, reg_event_name, user_nick,
                                           user_name, markup)
        elif what==1:
            new_user_nick=message.text
            if new_user_nick[0] != '@':
                new_user_nick = '@' + new_user_nick
            old_user_nick=user_nick
            if old_user_nick[0] != '@':
                old_user_nick = '@' + old_user_nick
            request_user_event_names()
            if new_user_nick in user_event_names_dict.keys():
                if reg_event_name in user_event_names_dict[new_user_nick]:
                    bot.send_message(message.chat.id,
                                     text=new_user_nick + ' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ' + reg_event_name)
                    user_nick=old_user_nick
                else:
                    user_nick=new_user_nick
            else:
                user_nick = new_user_nick
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(changebtn, yesbtn, backbtn)
            bot.send_message(message.chat.id,
                                    text='–ü–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ç–∞–∫: \n –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ' + reg_event_name + ' \n –ù–∏–∫: ' + user_nick + ' \n –ò–º—è: ' + user_name,
                                    reply_markup=markup)
            bot.register_next_step_handler(message, registration_on_event_chek, reg_event_ID, reg_event_name, user_nick,
                                           user_name, markup)

def find_it(user_nick):
    airtable = Airtable(airtale_app, airtable_reg_tbl, api_key_R)
    if user_nick[0] == '@':
        user_nick_w_o = user_nick[1:]
    else:
        user_nick_w_o = user_nick
        user_nick = '@'+user_nick
    try:
        with open('user_names_names.pkl', 'rb') as f1:
            user_names_user_names_dict=pickle.load(f1)
            find_it.user_name = user_names_user_names_dict[user_nick.lower()]
    except Exception:
        try:
            find_it.user_name = airtable.search("You login in TG (reg)", user_nick_w_o)[0]['fields']['–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)']
        except Exception:
            try:
                find_it.user_name = airtable.search("You login in TG (reg)", user_nick)[0]['fields']['–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)']
            except Exception:
                find_it.user_name = None

def are_you (message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    if message.text == '–î–∞':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(changebtn, yesbtn, backbtn)
        bot.send_message(message.chat.id, text='–ü–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ç–∞–∫:\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: '+reg_event_name+'\n–ù–∏–∫: '+user_nick+'\n–ò–º—è: '+user_name, reply_markup=markup)
        bot.register_next_step_handler(message, registration_on_event_chek, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–ù–µ—Ç':
        types.ReplyKeyboardRemove()
        markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(backbtn)
        bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏ –∏–º—è:', reply_markup=markup)
        bot.register_next_step_handler(message, use_new_name, reg_event_ID, reg_event_name, user_nick, user_name, markup)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        main_menu(message)
    else:
        bot.send_photo(message.chat.id, photo = open('wat/'+str(random.randrange(1, 6))+'.jpeg', 'rb'), reply_markup=markup)
        bot.register_next_step_handler(message, are_you, reg_event_ID, reg_event_name, user_nick, user_name, markup)

def send_for_reg(message, reg_event_ID, reg_event_name, user_nick, user_name, markup):
    airtable = Airtable(airtale_app, airtable_reg_tbl, api_key_RW)
    get_registration_list()
    if reg_event_name not in get_registration_list.avalible_event_name_event_id_dict.keys():
        bot.send_message(message.chat.id,
                     text='–í–æ—Ç –±–ª–∏–Ω! –í–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫—Ç–æ-—Ç–æ –ø–æ–¥—Ä–µ–∑–∞–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ –Ω–∞ '+ reg_event_name+ '(((( –ü—Ä–æ—Å—Ç–∏' )
    else:
        print(type(you_login_in_TG_field), you_login_in_TG_field)
        airtable.insert(
            {you_login_in_TG_field: user_nick, event_for_reg_field: reg_event_ID.split(), whats_your_name_field: user_name})
        request_user_event_names()
        if user_nick[0]!='@':
            user_nick='@'+user_nick
        if reg_event_name in user_event_names_dict[user_nick]:
            bot.send_message(message.chat.id,
                             text=user_nick+' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ ' + reg_event_name)
        print('–†–µ–≥–∞—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ' + reg_event_name + ' event ID: ' + str(
            reg_event_ID) + '–ù–∏–∫: ' + user_nick + '–ò–º—è: ' + user_name)
    main_menu(message)

def give_feedback():
    response_reg = requests.get(endpoint_past_event, headers=headers_R).json()['records']
    id_list = []
    name_event_list=[]
    feedback_text = open('./feedback.txt', 'r', encoding='UTF-8').read()
    for i in range(len(response_reg)):
        eventday=datetime.strptime(response_reg[i]['fields']['Date'][:len(response_reg[i]['fields']['Date'])-5], '%Y-%m-%dT%H:%M:%S')
        eventyesterday=datetime(eventday.year, eventday.month, eventday.day).date()
        eventname = response_reg[i]['fields']['Name event']
        airtable = Airtable(airtale_app, airtable_reg_tbl, api_key_R)
        if eventyesterday==date.today() - timedelta(days = 1):
            nicks = airtable.search("Event for reg", eventname)
            for i in range(len(nicks)):
                try:
                    id_list.append(user_names_chatid_dict[airtable.search("Event for reg", eventname)[i]['fields']['You login in TG (reg)']])
                    name_event_list.append(eventname)
                except:
                    i=+1
    text_to_log=datetime.now().strftime("%d-%m-%Y %H:%M")+' –ó–∞–ø—Ä–æ—Å–∏–ª–∏ —Ñ–∏–¥–±—ç–∫ –ø–æ ' + eventname + ' —É:\n'
    for i in range(len(id_list)):
        text_to_log+=user_names_chatid_dict[id_list[i]]+'\n'
            bot.send_message(id_list[i], text=feedback_text.replace("eventame", eventname, 1), parse_mode='Markdown', disable_web_page_preview=True)
    print(text_to_log)
    #text_to_log=text_to_log.decode('utf-8').encode('ANSI')
    #print(text_to_log)
    with open('log.txt', 'r+', encoding='utf-16') as f:
        f.seek(0, 2)  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        f.write(text_to_log)  # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–ø–∏—Å—å
#def error():
    #try:
bot.polling(none_stop=True, interval=0)

    #except Exception as ex:
        #print('ERROR: ', ex)
        #error()
#error()
    



























